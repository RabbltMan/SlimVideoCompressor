<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAqAwAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqamlqamlqamlqamlqamlqamlqamlqamlqamlqamlqamlqamlq
        amlqamlqamlqamlqamlqamkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACGhoaG
        hoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoZqamlqamlqamlqamllZWUAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fX19fQ0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PD
        w8PDw8PDw8PDw8OoqKiGhoZqamlqamlqamlqamkvLy9lZWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADX19fX19fQ0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8OoqKioqKhqamlqamlq
        amlqamkvLy8vLy9lZWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fX19fQ0NDDw8PDw8PDw8PD
        w8PDw8PDw8PDw8PDw8PDw8PDw8PDw8OoqKioqKhqamlqamlqammNjY0vLy8vLy8vLy9lZWUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADX19fX19fQ0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8Oo
        qKioqKhqamlqamlqammNjY0vLy88PDwvLy9lZWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fX19fQ
        0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8OoqKioqKhqamlqamlqammNjY0vLy88PDwv
        Ly9qamkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fQ0NDQ0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PD
        w8PDw8PDw8PDw8OoqKioqKhqamlqamlqammNjY0vLy88PDwvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADX19fQ0NDQ0NCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKhqamlqamlq
        ammNjY0vLy9lZWUvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fQ0NDQ0NCoqKioqKioqKio
        qKioqKioqKioqKioqKioqKioqKioqKioqKioqKhqamlqamlqammNjY0vLy9lZWUvLy+hoaEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADX19cAAAA8PDwQEDYQEDYLCygLCygLCygLCygLCygLCygLCygLCygLCygL
        CygbGxtqamlqamlqammNjY0vLy9lZWUvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19cAAAA8
        PDwbGxsQEDYLC0oLC0oLC0oLC0oLC0oLC0oLC0oLC0oQEDYbGxsbGxtqamlqamlqammNjY0vLy9lZWUv
        Ly+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19cAAAA8PDwbGxsbGxsbGxsLC0oLC0oLC0oLC0oL
        C0oLC0oLC0obGxsbGxsbGxtqamlqamlqammNjY0vLy9lZWUvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADX19cAAAA8PDw8PDwbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxtqamlqamlq
        ammNjY0vLy9ycnIvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fQ0NDQ0NDDw8PDw8PDw8PD
        w8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8NqamlqamlqammNjY0vLy9ycnIvLy+hoaEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADX19fQ0NDQ0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PD
        w8PDw8NqamlqamlqammNjY0vLy9ycnIvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADX19fQ0NDQ
        0NDDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8NqamlqamlqamlqamkvLy9ycnIv
        Ly+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlZWVlZWXQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ
        0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NBqamlqamlqamkvLy9ycnIvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABlZWVlZWWNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1lZWVlZWVX
        V1dXV1dXV1cvLy8vLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV1dXV1dXV1dlZWVX
        V1dlZWVlZWVlZWVlZWVlZWVXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dlZWUvLy8vLy+hoaEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dX
        V1dXV1dXV1dXV1dXV1dXV1dlZWVlZWUvLy+hoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABlZWVlZWXX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19dlZWVlZWVl
        ZWWhoaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlZWVlZWXX19fX19fX19fX
        19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19dlZWVlZWUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl
        ZWVlZWVlZWVlZWVlZWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///////////////////////////4AAH/8AAA/+AAAH/gAAA/4AAAH+AAAB/gA
        AAf4AAAH+AAAB/gAAAf6AAAH+gAAB/oAAAf6AAAH+AAAB/gAAAf4AAAH+AAAB/wAAAf+AAAH/gAAB/+A
        AAf/wAAH//AAD////////////////w==
</value>
  </data>
</root>